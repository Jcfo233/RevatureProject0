DROP TABLE USERS CASCADE CONSTRAINTS;
CREATE TABLE USERS (
		user_id NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
		first_name VARCHAR2(50) NOT NULL CHECK (LENGTH(first_name) > 1),
		last_name VARCHAR2(50) NOT NULL  CHECK (LENGTH(last_name) > 1),
		username VARCHAR2(55) UNIQUE  CHECK (LENGTH(username) > 7),
		password VARCHAR2(55) NOT NULL  CHECK (LENGTH(password) > 7),
		user_type VARCHAR2(55) NOT NULL
);

INSERT INTO users (first_name, last_name, username, password, user_type)
	VALUES ('Julie', 'Fowlkes', 'administrator', 'secretpass', 'ADMIN');
INSERT INTO users (first_name, last_name, username, password, user_type)
	VALUES ('Captain', 'Kidd', 'captain.kidd', 'captainpass', 'CUSTOMER');
	
DROP TABLE ACCOUNTS CASCADE CONSTRAINTS;
CREATE TABLE ACCOUNTS (
		account_id NUMBER(38) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
		balance NUMBER(20, 2) DEFAULT 100 CHECK (balance > -2)
);

INSERT INTO ACCOUNTS (balance) VALUES (10000);

DROP TABLE USER_ACC_JT;
CREATE TABLE USER_ACC_JT (
		account_id NUMBER REFERENCES ACCOUNTS (account_id),
		user_id NUMBER REFERENCES USERS (user_id)
);

INSERT INTO user_acc_jt (account_id, user_id) VALUES (1, 1);

DROP TABLE APPLICATION;
CREATE TABLE APPLICATION(
	user_id NUMBER REFERENCES USERS (user_id),
	account_id NUMBER DEFAULT 0
);

CREATE OR REPLACE PROCEDURE insert_into_apps(
		app_user_id IN NUMBER, app_account_id IN NUMBER
)
IS
BEGIN
		INSERT INTO APPLICATION (user_id, account_id)
			VALUES (app_user_id, app_account_id);
		COMMIT;
END;

CREATE OR REPLACE PROCEDURE insert_into_user(
		user_first IN VARCHAR2, user_last IN VARCHAR2,
		user_username IN VARCHAR2, user_password IN VARCHAR2, user_type IN VARCHAR2
)
IS
BEGIN 
		INSERT INTO USERS (FIRST_NAME, LAST_NAME, USERNAME, PASSWORD, USER_TYPE)
				VALUES (user_first, user_last, user_username, user_password, user_type);
		COMMIT;
END;
{CALL insert_into_user('Nancy', 'Yuan', 'nancy.yuan', 'nancypass', 'EMPLOYEE')};

CREATE OR REPLACE PROCEDURE approve_new_account(
app_user_id IN NUMBER
)
IS 
new_acc NUMBER;
BEGIN
		DELETE FROM APPLICATION WHERE user_id = app_user_id AND account_id = 0;
		INSERT INTO ACCOUNTS (BALANCE) VALUES (-1);
		SELECT ACCOUNT_ID INTO new_acc FROM ACCOUNTS WHERE BALANCE = -1;
		INSERT INTO USER_ACC_JT (ACCOUNT_ID, USER_ID) VALUES (NEW_ACC, app_user_id);
		UPDATE ACCOUNTS SET BALANCE = 100 WHERE ACCOUNT_ID = NEW_ACC;
END;
{CALL approve_new_account(2)};
{CALL approve_old_account(1, 2)};
CREATE OR REPLACE PROCEDURE approve_old_account(
app_account_id IN NUMBER, app_user_id IN NUMBER
) 
IS
BEGIN	
		DELETE FROM APPLICATION WHERE user_id = app_user_id AND account_id = app_account_id;
		INSERT INTO USER_ACC_JT (ACCOUNT_ID, USER_ID) VALUES (app_account_id, app_user_id);
		COMMIT;
END;

CREATE OR REPLACE PROCEDURE remove_user(dead_id IN NUMBER)
IS 
BEGIN
	DELETE FROM USER_ACC_JT WHERE user_id = dead_id;
	DELETE FROM USERS WHERE user_id = dead_id;
	COMMIT;
END;

CREATE OR REPLACE PROCEDURE transfer_funds(
	source_id IN NUMBER, target_id IN NUMBER, amount IN NUMBER
)
IS
	source_balance NUMBER;
	target_balance NUMBER;
BEGIN
	SELECT (balance - amount) INTO source_balance FROM ACCOUNTS a2 
		WHERE account_id = source_id;
	UPDATE ACCOUNTS 
		SET balance = source_balance
		WHERE account_id = source_id;
	
	SELECT (balance + amount) INTO target_balance FROM ACCOUNTS a 
		WHERE account_id = target_id;
	UPDATE ACCOUNTS 
		SET balance = target_balance
		WHERE account_id = target_id;
	COMMIT;
END;

CREATE OR REPLACE PROCEDURE remove_account(dead_id IN NUMBER)
IS
BEGIN 
	DELETE FROM USER_ACC_JT WHERE account_id = dead_id;
	DELETE FROM ACCOUNTS WHERE account_id = dead_id;
	COMMIT;
END;
COMMIT;